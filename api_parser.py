import requests
import csv
import os
import json
import time
from typing import List, Dict, Tuple, Optional
from playwright.sync_api import sync_playwright, Browser
from dataclasses import dataclass, asdict
from functools import wraps

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
API_BASE_URL = "https://mattel-creations-searchspring-proxy.netlify.app/api/search"
INVENTORY_API_URL = "https://mattel-checkout-prd.fly.dev/api/product-inventory"
CHECKOUT_URL = "https://creations.mattel.com/checkouts/cn/hWN4eQSmROJAn1IYF6ZTjU27/en-us?auto_redirect=false&edge_redirect=true&skip_shop_pay=true"

CSV_FIELDNAMES = ['car_name', 'SKU', 'page_name', 'max_qty', 'current_qty', 'image_url', 'price']
TARGET_CATEGORIES = [['Vehicles'], ['Action Figures']]

COLLECTIONS = [
    'hot-wheels-collectors|hot-wheels-collectors',
    'hot-wheels-collectors|hot-wheels-f1-collector-vehicles',
    'matchbox-collectors|matchbox-collectors',
    'mattel-creations|mattel-creations'
]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è retry
MAX_RETRIES = 3
RETRY_DELAY = 2  # —Å–µ–∫—É–Ω–¥
TOKEN_WAIT_TIMEOUT = 20  # —Å–µ–∫—É–Ω–¥


@dataclass
class Product:
    """–ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É."""
    car_name: str
    SKU: str
    page_name: str
    image_url: str
    price: str
    uid: str
    max_qty: int = 0
    current_qty: int = 0

    def to_csv_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –ø—Ä–æ–¥—É–∫—Ç —É —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è CSV."""
        return {
            'car_name': self.car_name,
            'SKU': self.SKU,
            'page_name': self.page_name,
            'max_qty': str(self.max_qty),
            'current_qty': str(self.current_qty),
            'image_url': self.image_url,
            'price': self.price
        }

    def matches(self, other: 'Product') -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å."""
        return (self.page_name == other.page_name and
                self.car_name == other.car_name and
                self.SKU == other.SKU)


def retry_on_failure(max_attempts: int = MAX_RETRIES, delay: int = RETRY_DELAY):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö."""

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(1, max_attempts + 1):
                try:
                    return func(*args, **kwargs)
                except requests.RequestException as e:
                    if attempt == max_attempts:
                        print(f"‚ùå –í—Å—ñ {max_attempts} —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ: {e}")
                        raise
                    print(f"‚ö†Ô∏è –°–ø—Ä–æ–±–∞ {attempt}/{max_attempts} –Ω–µ–≤–¥–∞–ª–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay}—Å...")
                    time.sleep(delay)
            return None

        return wrapper

    return decorator


def remove_url_params(url: str) -> str:
    """–í–∏–¥–∞–ª—è—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ URL."""
    if not url or not isinstance(url, str):
        return ''
    return url.split('?')[0]


@retry_on_failure(max_attempts=2)
def fetch_data_from_api(collection_name: str) -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –¥–∞–Ω—ñ –∑ API –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó."""
    collection, handle = collection_name.split('|')
    all_results = []
    current_page = 1

    # –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è total_pages
    while True:
        params = {
            "domain": f"/collections/{collection}",
            "bgfilter.collection_handle": handle,
            "resultsFormat": "native",
            "resultsPerPage": "999",
            "page": str(current_page),
            "bgfilter.ss_is_past_project": "false",
            "ts": str(int(time.time() * 1000))
        }

        response = requests.get(API_BASE_URL, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()

        results = data.get('results', [])
        if not results:
            break

        all_results.extend(results)
        print(f"üì• –°—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page}: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(results)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —â–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        pagination = data.get('pagination', {})
        total_pages = pagination.get('totalPages', current_page)

        if current_page >= total_pages:
            break

        current_page += 1

    print(f"‚úÖ –í—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(all_results)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ '{collection}'")
    return all_results


def process_api_results(results: List[Dict]) -> List[Product]:
    """–§—ñ–ª—å—Ç—Ä—É—î —Ç–∞ –æ–±—Ä–æ–±–ª—è—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ API."""
    products = []

    for item in results:
        category = item.get('tags_category', [])

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
        if category in TARGET_CATEGORIES:
            products.append(Product(
                car_name=item.get('name', ''),
                SKU=item.get('sku', ''),
                page_name=item.get('url', '').split('/')[-1],
                image_url=remove_url_params(item.get('imageUrl', '')),
                price=item.get('price', ''),
                uid=item.get('uid', '')
            ))

    print(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
    return products


class TokenManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó."""

    def __init__(self):
        self.token: Optional[str] = None
        self.token_obtained_at: Optional[float] = None
        self.token_lifetime = 240  # 4 —Ö–≤–∏–ª–∏–Ω–∏ (—Ç–æ–∫–µ–Ω –∂–∏–≤–µ ~5 —Ö–≤, –±–µ—Ä–µ–º–æ –∑ –∑–∞–ø–∞—Å–æ–º)
        self.refresh_attempts = 0
        self.max_refresh_attempts = 3

    def is_token_valid(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç–æ–∫–µ–Ω —â–µ –¥—ñ–π—Å–Ω–∏–π."""
        if not self.token or not self.token_obtained_at:
            return False
        elapsed = time.time() - self.token_obtained_at
        return elapsed < self.token_lifetime

    def get_token(self, force_refresh: bool = False) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω (–∑ –∫–µ—à—É –∞–±–æ –Ω–æ–≤–∏–π)."""
        if not force_refresh and self.is_token_valid():
            elapsed = int(time.time() - self.token_obtained_at)
            remaining = self.token_lifetime - elapsed
            print(f"‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω (–∑–∞–ª–∏—à–∏–ª–æ—Å—å ~{remaining}—Å)")
            return self.token

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if self.refresh_attempts >= self.max_refresh_attempts:
            print(f"‚ùå –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –æ–Ω–æ–≤–ª–µ–Ω—å —Ç–æ–∫–µ–Ω–∞ ({self.max_refresh_attempts})")
            return None

        self.refresh_attempts += 1
        print(f"üåê –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω (—Å–ø—Ä–æ–±–∞ {self.refresh_attempts}/{self.max_refresh_attempts})...")

        self.token = self._fetch_token_with_playwright()
        if self.token:
            self.token_obtained_at = time.time()
            self.refresh_attempts = 0  # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É
            print(f"‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ (–¥—ñ–π—Å–Ω–∏–π ~{self.token_lifetime}—Å)")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω")

        return self.token

    def _fetch_token_with_playwright(self) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Playwright."""
        try:
            with sync_playwright() as p:
                browser = p.chromium.launch(
                    headless=True,
                    args=[
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-gpu',
                        '--disable-blink-features=AutomationControlled'
                    ]
                )

                context = browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    bypass_csp=True
                )

                context.add_init_script("""
                    Object.defineProperty(navigator, 'webdriver', { get: () => false });
                    window.chrome = { runtime: {}, app: {}, loadTimes: () => {} };
                """)

                page = context.new_page()
                token = None

                def intercept(route, request):
                    nonlocal token
                    if 'mattel-checkout-prd.fly.dev/api/product-inventory' in request.url:
                        auth = request.headers.get('authorization') or request.headers.get('Authorization')
                        if auth and auth.startswith('Bearer '):
                            token = auth
                            print(f"‚úÖ –¢–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ")
                    route.continue_()

                page.route('**/*', intercept)
                page.goto(CHECKOUT_URL, timeout=60000)

                # –ß–µ–∫–∞—î–º–æ —Ç–æ–∫–µ–Ω
                start_time = time.time()
                while not token and (time.time() - start_time) < TOKEN_WAIT_TIMEOUT:
                    page.wait_for_timeout(1000)

                browser.close()
                return token

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Playwright: {e}")
            return None


def get_item_inventory(token: str, product_id: str) -> Tuple[int, int, bool]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø—Ä–æ–¥—É–∫—Ç—É.

    Returns:
        (max_qty, current_qty, success)
    """
    headers = {
        "Authorization": token,
        "Accept": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
        "Origin": "https://extensions.shopifycdn.com",
        "Referer": "https://extensions.shopifycdn.com/",
    }

    params = {"productIds": f"gid://shopify/Product/{product_id}"}

    try:
        resp = requests.get(INVENTORY_API_URL, headers=headers, params=params, timeout=15)
        resp.raise_for_status()
        data = resp.json()
    except requests.HTTPError as e:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPError –Ω–∞–≤–µ—Ä—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 401
        raise
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–ª—è {product_id}: {e}")
        return 0, 0, False

    if not data or not isinstance(data, list) or len(data) == 0:
        return 0, 0, True  # –ü–æ—Ä–æ–∂–Ω—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä - —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞

    item = data[0]
    total_inventory = item.get("totalInventory", 0) or 0

    # –û–±—Ä–æ–±–∫–∞ variantMeta
    variant_meta = item.get("variantMeta")
    if not variant_meta or not variant_meta.get("value"):
        return int(total_inventory), 0, True

    try:
        parsed = json.loads(variant_meta["value"])
        if not parsed or not isinstance(parsed, list):
            return int(total_inventory), 0, True

        variant_inventory = parsed[0].get("variant_inventory", [])
    except (TypeError, json.JSONDecodeError, IndexError, KeyError):
        return int(total_inventory), 0, True

    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: Available ‚Üí Backordered ‚Üí 0
    for entry in variant_inventory:
        if entry.get("variant_inventorystatus") == "Available":
            qty = entry.get("variant_qty", 0) or 0
            return int(total_inventory), int(qty), True

    # –Ø–∫—â–æ –Ω–µ–º–∞—î Available, —à—É–∫–∞—î–º–æ Backordered
    for entry in variant_inventory:
        if entry.get("variant_inventorystatus") == "Backordered":
            qty = entry.get("variant_qty", 0) or 0
            return int(total_inventory), int(qty), True

    return int(total_inventory), 0, True


def update_products_qty(products: List[Product], token_manager: TokenManager) -> List[Product]:
    """–û–Ω–æ–≤–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É."""
    token = token_manager.get_token()
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
        return products

    failed_products = []  # –ü—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏

    for i, product in enumerate(products, 1):
        if not product.uid:
            print(f"‚è≠Ô∏è [{i}/{len(products)}] –ü—Ä–æ–ø—É—â–µ–Ω–æ {product.car_name[:40]}: –Ω–µ–º–∞—î UID")
            continue

        print(f"üîÑ [{i}/{len(products)}] {product.car_name[:50]}...")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º (—è–∫—â–æ –º–∏–Ω—É–ª–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É)
        if not token_manager.is_token_valid():
            print("‚è∞ –¢–æ–∫–µ–Ω –∑–∞—Å—Ç–∞—Ä—ñ–≤, –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ...")
            token = token_manager.get_token(force_refresh=True)
            if not token:
                print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–∫—É")
                break

        try:
            max_qty, current_qty, success = get_item_inventory(token, product.uid)

            if success:
                product.max_qty = max_qty
                product.current_qty = current_qty

        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 401:
                print("üîÑ 401 Unauthorized - —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π, –æ–Ω–æ–≤–ª—é—î–º–æ...")
                token = token_manager.get_token(force_refresh=True)

                if token:
                    try:
                        max_qty, current_qty, success = get_item_inventory(token, product.uid)
                        if success:
                            product.max_qty = max_qty
                            product.current_qty = current_qty
                        else:
                            failed_products.append(product.car_name)
                    except Exception as retry_e:
                        print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –Ω–µ–≤–¥–∞–ª–∞: {retry_e}")
                        failed_products.append(product.car_name)
                else:
                    print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω, –ø—Ä–∏–ø–∏–Ω—è—î–º–æ")
                    failed_products.extend([p.car_name for p in products[i - 1:]])
                    break
            else:
                print(f"‚ùå HTTP {e.response.status_code} –¥–ª—è {product.uid}")
                failed_products.append(product.car_name)

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {product.uid}: {e}")
            failed_products.append(product.car_name)

    if failed_products:
        print(f"\n‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ {len(failed_products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:")
        for name in failed_products[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            print(f"  - {name[:60]}")
        if len(failed_products) > 5:
            print(f"  ... —Ç–∞ —â–µ {len(failed_products) - 5}")

    return products


class CSVManager:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ CSV —Ñ–∞–π–ª–æ–º."""

    def __init__(self, csv_file: str = 'output.csv'):
        self.csv_file = csv_file
        self._cache: Optional[List[Product]] = None

    def remove_duplicates(self) -> int:
        """–í–∏–¥–∞–ª—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑ CSV —Ñ–∞–π–ª—É. –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤."""
        products = self._load_cache()
        original_count = len(products)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        # –ö–ª—é—á: (page_name, car_name, SKU)
        unique_products = {}

        for product in products:
            key = (product.page_name, product.car_name, product.SKU)

            if key in unique_products:
                existing = unique_products[key]

                # –ü—Ä–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∞—Ö:
                # - current_qty: –±–µ—Ä–µ–º–æ –ú–ï–ù–®–ï (—Ç–æ–≤–∞—Ä–∏ —Ä–æ–∑–∫—É–ø–æ–≤—É—é—Ç—å)
                # - max_qty: –±–µ—Ä–µ–º–æ –ë–Ü–õ–¨–®–ï (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —â–æ –±—É–ª–∞)
                # - image_url, price: –±–µ—Ä–µ–º–æ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ

                merged = Product(
                    car_name=product.car_name,
                    SKU=product.SKU,
                    page_name=product.page_name,
                    image_url=existing.image_url or product.image_url,
                    price=existing.price or product.price,
                    uid=product.uid or existing.uid,
                    max_qty=max(existing.max_qty, product.max_qty),
                    current_qty=min(existing.current_qty,
                                    product.current_qty) if existing.current_qty > 0 and product.current_qty > 0 else max(
                        existing.current_qty, product.current_qty)
                )

                unique_products[key] = merged
            else:
                unique_products[key] = product

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        self._cache = list(unique_products.values())
        duplicates_removed = original_count - len(self._cache)

        if duplicates_removed > 0:
            print(f"üßπ –í–∏–¥–∞–ª–µ–Ω–æ {duplicates_removed} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ({original_count} ‚Üí {len(self._cache)})")

        return duplicates_removed

    def _load_cache(self) -> List[Product]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ –∑ CSV —É –ø–∞–º'—è—Ç—å."""
        if self._cache is not None:
            return self._cache

        products = []

        if os.path.exists(self.csv_file) and os.path.getsize(self.csv_file) > 0:
            try:
                with open(self.csv_file, 'r', newline='', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    for row in reader:
                        products.append(Product(
                            car_name=row.get('car_name', ''),
                            SKU=row.get('SKU', ''),
                            page_name=row.get('page_name', ''),
                            image_url=row.get('image_url', ''),
                            price=row.get('price', ''),
                            uid='',  # UID –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ CSV
                            max_qty=int(row.get('max_qty', 0) or 0),
                            current_qty=int(row.get('current_qty', 0) or 0)
                        ))
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}")

        self._cache = products
        return products

    def update_or_add(self, new_product: Product) -> None:
        """–û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ–¥—É–∫—Ç –∞–±–æ –¥–æ–¥–∞—î –Ω–æ–≤–∏–π."""
        if new_product.current_qty is None:
            return

        existing_products = self._load_cache()
        found = False

        for existing in existing_products:
            if existing.matches(new_product):
                old_qty = existing.current_qty
                old_max = existing.max_qty

                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
                existing.current_qty = new_product.current_qty
                existing.max_qty = new_product.max_qty

                # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ
                if not existing.image_url:
                    existing.image_url = new_product.image_url
                if not existing.price:
                    existing.price = new_product.price

                # –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
                if old_qty != new_product.current_qty or old_max != new_product.max_qty:
                    print(
                        f"üìù –û–Ω–æ–≤–ª–µ–Ω–æ {new_product.car_name[:40]}: qty {old_qty}‚Üí{new_product.current_qty}, max {old_max}‚Üí{new_product.max_qty}")

                found = True
                break

        if not found:
            print(f"‚ûï –ù–æ–≤–∏–π: {new_product.car_name[:40]}")
            existing_products.append(new_product)

    def save(self) -> None:
        """–ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ –¥–∞–Ω—ñ –≤ CSV —Ñ–∞–π–ª."""
        if self._cache is None:
            return

        try:
            with open(self.csv_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=CSV_FIELDNAMES)
                writer.writeheader()
                writer.writerows([p.to_csv_dict() for p in self._cache])
            print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(self._cache)} –∑–∞–ø–∏—Å—ñ–≤ —É {self.csv_file}")
        except IOError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ CSV: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π."""
    print("üöÄ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∫–æ–ª–µ–∫—Ü—ñ–π Mattel\n")

    token_manager = TokenManager()
    csv_manager = CSVManager()

    # –û—á–∏—â–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º
    csv_manager.remove_duplicates()
    csv_manager.save()

    for collection in COLLECTIONS:
        print(f"\n{'=' * 60}")
        print(f"üì¶ –ö–æ–ª–µ–∫—Ü—ñ—è: {collection}")
        print('=' * 60)

        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
            results = fetch_data_from_api(collection)
            if not results:
                print("‚ö†Ô∏è –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é")
                continue

            # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            products = process_api_results(results)
            if not products:
                print("‚ö†Ô∏è –ù–µ–º–∞—î –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")
                continue

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            products = update_products_qty(products, token_manager)

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ CSV (batch update)
            for product in products:
                csv_manager.update_or_add(product)

            csv_manager.save()
            print(f"‚úÖ –ö–æ–ª–µ–∫—Ü—ñ—è –æ–±—Ä–æ–±–ª–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            continue

    print("\nüéâ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()